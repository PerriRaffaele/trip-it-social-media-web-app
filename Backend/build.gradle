plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id 'com.diffplug.spotless' version '6.18.0'
}

group = 'ch.usi.inf.bsc.sa4'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
	implementation group: 'org.json', name: 'json', version: '20220320'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    testImplementation 'junit:junit:4.13.1'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.6.2'
	testImplementation 'org.springframework.security:spring-security-test'
}


tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
	}
}

spotless {
	java {
		// Use the default importOrder configuration
		importOrder()
		// optional: you can specify import groups directly
		// note: you can use an empty string for all the imports you didn't specify explicitly, '|' to join group without blank line, and '\\#` prefix for static imports
		// importOrder('java|javax', 'com.acme', '', '\\#com.acme', '\\#')
		// optional: instead of specifying import groups directly you can specify a config file
		// export config file: https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md#creating-spotlessimportorder
		// importOrderFile('eclipse-import-order.txt') // import order file as exported from eclipse

		removeUnusedImports()

		// Cleanthat will refactor your code, but it may break your style: apply it before your formatter
		cleanthat()          // has its own section below

		// Choose one of these formatters.
		googleJavaFormat()   // has its own section below

		formatAnnotations()  // fixes formatting of type annotations, see below

		// licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
	}
}

task removePreCommitHook(type: Exec) {
	commandLine('rm', '-rf', './.git/hooks/pre-commit')
}

task updateGitHooks(type: Exec) {
	commandLine('cp', './hooks/post-commit', './.git/hooks')
}

compileJava.dependsOn updateGitHooks
compileJava.dependsOn removePreCommitHook